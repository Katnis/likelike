#labels Featured
=Requirements=

 * Java 1.6.0 or greater
 * Hadoop 0.20.0 or greater

=Download and install=
 * Install Java (install from [http://www.java.com/download/ download page]) 
 * Install Hadoop  (see [http://hadoop.apache.org/common/docs/current/quickstart.html Hadoop Quick Start])
 * Install Likelike
   # go to your home directory (/home/username if your account name is 'username')
     {{{
     cd /home/username/
     }}}
   # download the source file by svn
     {{{
     svn checkout http://likelike.googlecode.com/svn/trunk/ likelike
     }}}
   # run ant
     {{{
     cd likelike
     ant
     }}}     
   # set path 
   adding the oluolu jar file into HADOOP_CLASSPATH in $HADOOP_HOME/conf/hadoop-env.sh)
     {{{
     export HADOOP_CLASSPATH=$CLASSPATH:/home/username/likelike/likelike-***.jar
     }}}

=Running examples= 
Now let's run Likelike with a sample input file attached in the Likelike source (likelike/src/test/resources/testInput.txt).

==Nearest neighbor extraction==
Here I will describe the way to extract the similar (related) examples from data file. Here examples mean instances such as users in E-commerce sites or pictures for picture sharing sites).

First copy a sample input file into HDFS.

{{{
$ hadoop dfs -put src/test/resources/testInput.txt /blah/blah/path/
}}}

Run likelike with the following parameters.

{{{
sh bin/likelike lsh -input /blah/blah/path/testInput.txt -output testOutputDir
}}}

We can see the result by the following command.

{{{
$ hadoop dfs -cat /blah/blah/path/testOutpuDir
0       5766
0       1962
0       2649
}}}

==Feature extraction from similar (related) examples==

Now let's extract features from related examples. This function is useful to extract some recommendations for users of E-commerce sites.

To run this function, we use the result of nearest neighbor extraction. The extraction can be done with the following command.

{{{
sh bin/likelike featureExtraction -input /blah/blah/path/testOutputDir -feature /blah/blah/path/testInput.txt -output testOutputDir.features
}}}

We can see that the input file is the output from the lsh (nearest neighbor extraction) command, and after '-feature' parameter the input of the lsh command is also assigned. 

Now let's see the result.

{{{
$ hadoop dfs -cat /blah/blah/path/testOutputDir.features
0       4439 3825 2066 4270 677 2863 2738 4141 1090 3811
1       1245 2751 1223 2067 3287 3829 1368 2980 285 1658
2       1622 2442 3704 4066 4608 4746 545 3398 4072 1635
3       4131 4537 686 2854 1914 414 1370 1219 6 2038
4       4065 1220 4609 3402 1489 4408 1229 829 2075 4530
5       2615 4267 3405 1216 819 1634 1366 4743 4142 4619
6       4944 1642 549 4069 2985 279 3831 4259 10 552
7       1607 2307 3286 822 3405 2440 4751 4069 2204 3280
8       3445 2748 1914 4882 1646 5 4406 3828 1099 545
}}}

 